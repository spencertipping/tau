#if τgl

#include "gl-geom.hh"
#include "begin.hh"

namespace σ
{


mat4 mat4::identity()
{
  return mat4(1, 0, 0, 0,
              0, 1, 0, 0,
              0, 0, 1, 0,
              0, 0, 0, 1);
}

mat4 mat4::translate(f64 x, f64 y, f64 z)
{
  return mat4(1.0, 0.0, 0.0, x,
              0.0, 1.0, 0.0, y,
              0.0, 0.0, 1.0, z,
              0.0, 0.0, 0.0, 1.0);
}

mat4 mat4::scale(f64 x, f64 y, f64 z)
{
  return mat4(x,   0.0, 0.0, 0.0,
              0.0, y,   0.0, 0.0,
              0.0, 0.0, z,   0.0,
              0.0, 0.0, 0.0, 1.0);
}

mat4 mat4::rotate_x(f64 r)
{
  f64 c = cos(r);
  f64 s = sin(r);
  return mat4(1.0, 0.0, 0.0, 0.0,
              0.0, c,   -s,  0.0,
              0.0, s,    c,  0.0,
              0.0, 0.0, 0.0, 1.0);
}

mat4 mat4::rotate_y(f64 r)
{
  f64 c = cos(r);
  f64 s = sin(r);
  return mat4(c,   0.0, s,   0.0,
              0.0, 1.0, 0.0, 0.0,
              -s,  0.0, c,   0.0,
              0.0, 0.0, 0.0, 1.0);
}

mat4 mat4::rotate_z(f64 r)
{
  f64 c = cos(r);
  f64 s = sin(r);
  return mat4(c,   -s,  0.0, 0.0,
              s,    c,  0.0, 0.0,
              0.0, 0.0, 1.0, 0.0,
              0.0, 0.0, 0.0, 1.0);
}


// Matrix inversion code from
// http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm


mat4 mat4::inv() const
{
  mat4 r(*this);
  r.m[0][0] = r.m[1][2]*r.m[2][3]*r.m[3][1] - r.m[1][3]*r.m[2][2]*r.m[3][1] + r.m[1][3]*r.m[2][1]*r.m[3][2] - r.m[1][1]*r.m[2][3]*r.m[3][2] - r.m[1][2]*r.m[2][1]*r.m[3][3] + r.m[1][1]*r.m[2][2]*r.m[3][3];
  r.m[0][1] = r.m[0][3]*r.m[2][2]*r.m[3][1] - r.m[0][2]*r.m[2][3]*r.m[3][1] - r.m[0][3]*r.m[2][1]*r.m[3][2] + r.m[0][1]*r.m[2][3]*r.m[3][2] + r.m[0][2]*r.m[2][1]*r.m[3][3] - r.m[0][1]*r.m[2][2]*r.m[3][3];
  r.m[0][2] = r.m[0][2]*r.m[1][3]*r.m[3][1] - r.m[0][3]*r.m[1][2]*r.m[3][1] + r.m[0][3]*r.m[1][1]*r.m[3][2] - r.m[0][1]*r.m[1][3]*r.m[3][2] - r.m[0][2]*r.m[1][1]*r.m[3][3] + r.m[0][1]*r.m[1][2]*r.m[3][3];
  r.m[0][3] = r.m[0][3]*r.m[1][2]*r.m[2][1] - r.m[0][2]*r.m[1][3]*r.m[2][1] - r.m[0][3]*r.m[1][1]*r.m[2][2] + r.m[0][1]*r.m[1][3]*r.m[2][2] + r.m[0][2]*r.m[1][1]*r.m[2][3] - r.m[0][1]*r.m[1][2]*r.m[2][3];
  r.m[1][0] = r.m[1][3]*r.m[2][2]*r.m[3][0] - r.m[1][2]*r.m[2][3]*r.m[3][0] - r.m[1][3]*r.m[2][0]*r.m[3][2] + r.m[1][0]*r.m[2][3]*r.m[3][2] + r.m[1][2]*r.m[2][0]*r.m[3][3] - r.m[1][0]*r.m[2][2]*r.m[3][3];
  r.m[1][1] = r.m[0][2]*r.m[2][3]*r.m[3][0] - r.m[0][3]*r.m[2][2]*r.m[3][0] + r.m[0][3]*r.m[2][0]*r.m[3][2] - r.m[0][0]*r.m[2][3]*r.m[3][2] - r.m[0][2]*r.m[2][0]*r.m[3][3] + r.m[0][0]*r.m[2][2]*r.m[3][3];
  r.m[1][2] = r.m[0][3]*r.m[1][2]*r.m[3][0] - r.m[0][2]*r.m[1][3]*r.m[3][0] - r.m[0][3]*r.m[1][0]*r.m[3][2] + r.m[0][0]*r.m[1][3]*r.m[3][2] + r.m[0][2]*r.m[1][0]*r.m[3][3] - r.m[0][0]*r.m[1][2]*r.m[3][3];
  r.m[1][3] = r.m[0][2]*r.m[1][3]*r.m[2][0] - r.m[0][3]*r.m[1][2]*r.m[2][0] + r.m[0][3]*r.m[1][0]*r.m[2][2] - r.m[0][0]*r.m[1][3]*r.m[2][2] - r.m[0][2]*r.m[1][0]*r.m[2][3] + r.m[0][0]*r.m[1][2]*r.m[2][3];
  r.m[2][0] = r.m[1][1]*r.m[2][3]*r.m[3][0] - r.m[1][3]*r.m[2][1]*r.m[3][0] + r.m[1][3]*r.m[2][0]*r.m[3][1] - r.m[1][0]*r.m[2][3]*r.m[3][1] - r.m[1][1]*r.m[2][0]*r.m[3][3] + r.m[1][0]*r.m[2][1]*r.m[3][3];
  r.m[2][1] = r.m[0][3]*r.m[2][1]*r.m[3][0] - r.m[0][1]*r.m[2][3]*r.m[3][0] - r.m[0][3]*r.m[2][0]*r.m[3][1] + r.m[0][0]*r.m[2][3]*r.m[3][1] + r.m[0][1]*r.m[2][0]*r.m[3][3] - r.m[0][0]*r.m[2][1]*r.m[3][3];
  r.m[2][2] = r.m[0][1]*r.m[1][3]*r.m[3][0] - r.m[0][3]*r.m[1][1]*r.m[3][0] + r.m[0][3]*r.m[1][0]*r.m[3][1] - r.m[0][0]*r.m[1][3]*r.m[3][1] - r.m[0][1]*r.m[1][0]*r.m[3][3] + r.m[0][0]*r.m[1][1]*r.m[3][3];
  r.m[2][3] = r.m[0][3]*r.m[1][1]*r.m[2][0] - r.m[0][1]*r.m[1][3]*r.m[2][0] - r.m[0][3]*r.m[1][0]*r.m[2][1] + r.m[0][0]*r.m[1][3]*r.m[2][1] + r.m[0][1]*r.m[1][0]*r.m[2][3] - r.m[0][0]*r.m[1][1]*r.m[2][3];
  r.m[3][0] = r.m[1][2]*r.m[2][1]*r.m[3][0] - r.m[1][1]*r.m[2][2]*r.m[3][0] - r.m[1][2]*r.m[2][0]*r.m[3][1] + r.m[1][0]*r.m[2][2]*r.m[3][1] + r.m[1][1]*r.m[2][0]*r.m[3][2] - r.m[1][0]*r.m[2][1]*r.m[3][2];
  r.m[3][1] = r.m[0][1]*r.m[2][2]*r.m[3][0] - r.m[0][2]*r.m[2][1]*r.m[3][0] + r.m[0][2]*r.m[2][0]*r.m[3][1] - r.m[0][0]*r.m[2][2]*r.m[3][1] - r.m[0][1]*r.m[2][0]*r.m[3][2] + r.m[0][0]*r.m[2][1]*r.m[3][2];
  r.m[3][2] = r.m[0][2]*r.m[1][1]*r.m[3][0] - r.m[0][1]*r.m[1][2]*r.m[3][0] - r.m[0][2]*r.m[1][0]*r.m[3][1] + r.m[0][0]*r.m[1][2]*r.m[3][1] + r.m[0][1]*r.m[1][0]*r.m[3][2] - r.m[0][0]*r.m[1][1]*r.m[3][2];
  r.m[3][3] = r.m[0][1]*r.m[1][2]*r.m[2][0] - r.m[0][2]*r.m[1][1]*r.m[2][0] + r.m[0][2]*r.m[1][0]*r.m[2][1] - r.m[0][0]*r.m[1][2]*r.m[2][1] - r.m[0][1]*r.m[1][0]*r.m[2][2] + r.m[0][0]*r.m[1][1]*r.m[2][2];
  return r * (1 / det());
}


f64 mat4::det() const
{
  return
    m[0][3]*m[1][2]*m[2][1]*m[3][0] - m[0][2]*m[1][3]*m[2][1]*m[3][0] - m[0][3]*m[1][1]*m[2][2]*m[3][0] + m[0][1]*m[1][3]*m[2][2]*m[3][0]+
    m[0][2]*m[1][1]*m[2][3]*m[3][0] - m[0][1]*m[1][2]*m[2][3]*m[3][0] - m[0][3]*m[1][2]*m[2][0]*m[3][1] + m[0][2]*m[1][3]*m[2][0]*m[3][1]+
    m[0][3]*m[1][0]*m[2][2]*m[3][1] - m[0][0]*m[1][3]*m[2][2]*m[3][1] - m[0][2]*m[1][0]*m[2][3]*m[3][1] + m[0][0]*m[1][2]*m[2][3]*m[3][1]+
    m[0][3]*m[1][1]*m[2][0]*m[3][2] - m[0][1]*m[1][3]*m[2][0]*m[3][2] - m[0][3]*m[1][0]*m[2][1]*m[3][2] + m[0][0]*m[1][3]*m[2][1]*m[3][2]+
    m[0][1]*m[1][0]*m[2][3]*m[3][2] - m[0][0]*m[1][1]*m[2][3]*m[3][2] - m[0][2]*m[1][1]*m[2][0]*m[3][3] + m[0][1]*m[1][2]*m[2][0]*m[3][3]+
    m[0][2]*m[1][0]*m[2][1]*m[3][3] - m[0][0]*m[1][2]*m[2][1]*m[3][3] - m[0][1]*m[1][0]*m[2][2]*m[3][3] + m[0][0]*m[1][1]*m[2][2]*m[3][3];
}


O &operator<<(O &s, color const &c)
{
  return s << "color(" << c.r << ", " << c.g << ", " << c.b << ", " << c.a << ")";
}

O &operator<<(O &s, vec2 const &v)
{
  return s << "<" << v.x << ", " << v.y << ">";
}

O &operator<<(O &s, vec3 const &v)
{
  return s << "<" << v.x << ", " << v.y << ", " << v.z << ">";
}

O &operator<<(O &s, vec4 const &v)
{
  return s << "<" << v.x << ", " << v.y << ", " << v.z << ", " << v.w << ">";
}

O &operator<<(O &s, mat4 const &m)
{
  return s << "[" << m.m[0][0] << ", " << m.m[0][1] << ", " << m.m[0][2] << ", " << m.m[0][3] << "|\n"
           << "|" << m.m[1][0] << ", " << m.m[1][1] << ", " << m.m[1][2] << ", " << m.m[1][3] << "|\n"
           << "|" << m.m[2][0] << ", " << m.m[2][1] << ", " << m.m[2][2] << ", " << m.m[2][3] << "|\n"
           << "|" << m.m[3][0] << ", " << m.m[3][1] << ", " << m.m[3][2] << ", " << m.m[3][3] << "]";
}


}

#include "end.hh"

#endif
