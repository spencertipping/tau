#!/bin/bash
set -euo pipefail


t() {
  echo "$@"
  time "$@"
}

usage() {
  echo "usage: $0 t[est]"
  echo "       $0 c[ompile]"
  echo "       $0 d[ebug]"
  echo "       $0 q[uick]"
  echo "       $0 r[epeat]"
  echo "       $0 p[rod]"
  exit 1
}


t_gcc_opts=(-std=c++20 -O3 -Wno-literal-suffix )
t_em_opts=(
  -std=c++20 -O3 -fexceptions -sASYNCIFY -sTOTAL_MEMORY=1024MB -sASSERTIONS
  -Wno-parentheses -Wno-user-defined-literals
)
t_gcc_debug_opts=(
  -Wall -Wno-parentheses -Wno-misleading-indentation -Wno-literal-suffix
  -std=c++20 -O0 -g -Dtau_debug=1
)


(( $# )) || usage

cmd=$1
shift

cd "$(dirname "$0")"

case $cmd in
  c*) t g++ "${t_gcc_debug_opts[@]}" -DQUICK=1 t/test.cc -o t/test-quick -lboost_context
      ;;

  q*) rm -f t/test-quick t/test32-quick
      t g++                "${t_gcc_debug_opts[@]}" -DQUICK=1      t/test.cc -o t/test-quick -lboost_context &
      t i686-linux-gnu-g++ "${t_gcc_debug_opts[@]}" -DQUICK=1 -m32 t/test.cc -o t/test32-quick &
      wait

      if valgrind --track-origins=yes t/test-quick >t/test-quick.log 2>&1; then
        echo -e "\033[1;32m64-bit all ok\033[0;0m"
      else
        echo -e "\033[1;31m64-bit error\033[0;0m"
        less t/test-quick.log
        exit 1
      fi

      if valgrind --track-origins=yes t/test32-quick >t/test32-quick.log 2>&1; then
        echo -e "\033[1;32m32-bit all ok\033[0;0m"
      else
        echo -e "\033[1;31m32-bit error\033[0;0m"
        less t/test32-quick.log
        exit 1
      fi

      t dev/emsdk em++ "${t_em_opts[@]}" -g -DQUICK=1 t/test.cc -o t/test-quick.html
      if node --trace-uncaught t/test-quick.js >t/testjs-quick.log 2>&1; then
        echo -e "\033[1;32mjs all ok\033[0;0m"
      else
        echo -e "\033[1;31mjs error\033[0;0m"
        less t/testjs-quick.log
        exit 1
      fi
      ;;

  p*) rm -f t/test t/test32 t/test.js
      t g++                -Dtau_debug=0 -Dtau_debug_nop=1 "${t_gcc_opts[@]}"      t/test.cc -o t/test -lboost_context &
      t i686-linux-gnu-g++ -Dtau_debug=0 -Dtau_debug_nop=1 "${t_gcc_opts[@]}" -m32 t/test.cc -o t/test32 &
      t dev/emsdk em++     -Dtau_debug=0 -Dtau_debug_nop=1 "${t_em_opts[@]}"       t/test.cc -o t/test.js &
      wait

      strip t/test
      strip t/test32
      ;;

  d*) rm -f t/test-debug t/test32-debug
      t g++                "${t_gcc_debug_opts[@]}"      t/test.cc -o t/test-debug -lboost_context &
      t i686-linux-gnu-g++ "${t_gcc_debug_opts[@]}" -m32 t/test.cc -o t/test32-debug &
      wait
      ;;

  t*) rm -f t/test t/test32 t/test.js
      t g++                "${t_gcc_opts[@]}"      t/test.cc -o t/test -lboost_context &
      t i686-linux-gnu-g++ "${t_gcc_opts[@]}" -m32 t/test.cc -o t/test32 &
      t dev/emsdk em++     "${t_em_opts[@]}"       t/test.cc -o t/test.js &
      wait

      test64_ret=0
      test32_ret=0
      testjs_ret=0

      time t/test         || test64_ret=$?
      time t/test32       || test32_ret=$?
      time node t/test.js || testjs_ret=$?

      echo

      ret=$(( test64_ret | test32_ret | testjs_ret ))
      if (( ret )); then
        echo -e "\033[1;31mERROR: $test64_ret, $test32_ret, $testjs_ret\033[0;0m"
      else
        echo -e "\033[1;32mall ok: $test64_ret, $test32_ret, $testjs_ret\033[0;0m"
      fi
      exit $ret
      ;;

  r*) exec 3<&2 2>/dev/null
      t g++ "${t_gcc_debug_opts[@]}" -DQUICK=1 t/test.cc -o t/test-quick -lboost_context
      rm -f t/test-quick-repeat.log

      echo "running t/test-quick 1000x"
      echo -n "0: "
      for i in `seq 1000`; do
        if t/test-quick "$@" >/dev/null 2>>t/test-quick-repeat.log; then
          echo -n '.'
        else
          echo -n '#'
        fi
        if (( i % 50 == 0 )); then
          echo
          echo -n "$i: "
        fi
      done
      ni t/test-quick-repeat.log gcO
      ;;

  *)  usage
      ;;
esac
