#!/bin/bash
set -euo pipefail
cd "$(dirname "$0")"

#cflags="$(<compile_flags.txt) -O3"
cflags="$(grep -v ^-I compile_flags.txt) -O3"

linux_flags="$cflags -flto"
wasm_flags="$cflags -std=c++20 -fexceptions"

linux_link=(
  #-lpangocairo-1.0 -lpango-1.0 -lgobject-2.0 -lglib-2.0
  #-lharfbuzz -lcairo
  #-lxcb -lX11 -lGL -lX11-xcb
  -flto
  -lboost_context
  -lzstd
)
wasm_link=(
  -sTOTAL_MEMORY=1024MB
  -sASYNCIFY
)


mkdir -p bin/{linux,wasm}/{tau,try}


rebuild_all=
for f in tau/*.hh build; do
  for o in `find bin -name '*.o'`; do
    if [[ $f -nt $o ]]; then
      rebuild_all=yes
      break
    fi
  done
done


linux_cc()
{
  src=$1
  obj=bin/linux/${1%.cc}.o
  if [[ -n $rebuild_all ]] || [[ $src -nt $obj ]]; then
    g++ $linux_flags $src -c -o $obj
    echo "linux/compiled $src"
  fi
}

wasm_cc()
{
  src=$1
  obj=bin/wasm/${1%.cc}.o
  if [[ -n $rebuild_all ]] || [[ $src -nt $obj ]]; then
    dev/emsdk em++ $wasm_flags $src -c -o $obj
    echo "wasm/compiled $src"
  fi
}


linux_link()
{
  src=$1
  obj=bin/linux/${src%.cc}.o
  out=bin/$(basename $src .cc)

  build=
  for f in $obj `find bin/linux/tau -name '*.o'`; do
    if [[ $f -nt $out ]]; then
      build=yes
      break
    fi
  done

  if [[ -n $build ]]; then
    g++ $linux_flags `find bin/linux/tau -name '*.o'` \
        $obj -o $out ${linux_link[@]}
    echo "linux/link $out"
  fi
}

wasm_link()
{
  src=$1
  obj=bin/wasm/${src%.cc}.o
  out=bin/$(basename $src .cc).js

  build=
  for f in $obj `find bin/wasm/tau -name '*.o'`; do
    if [[ $f -nt $out ]]; then
      build=yes
      break
    fi
  done

  if [[ -n $build ]]; then
    dev/emsdk em++ $wasm_flags `find bin/wasm/tau -name '*.o'` \
              $obj -o $out ${wasm_link[@]}
    echo "wasm/link $out"
  fi
}


compile()
{
  for f in tau/*.cc try/*.cc; do
    linux_cc $f &
    wasm_cc  $f &
  done
  wait
  echo "compile done"
}


link()
{
  for f in try/*.cc; do
    linux_link $f &
    wasm_link  $f &
  done
  wait
  echo "link done"
}


time compile
time link
